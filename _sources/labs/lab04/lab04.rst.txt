:orphan:

****************************************
Lab No. 04: Introduction to Unit Testing
****************************************


In this Lab, you are going to implement the game 2048 (https://play2048.co) in the terminal with Python.
It might not be as pretty as the web based game, but it certainly can provide countless hours of fun if you happen to find your self stranded without an internet connection and all you have is a terminal.


Goal of the Game
================
The game is very simple, and probably the best way to understand its rules is to spend 5 minutes playing it online.
It consists of a board of 4 x 4 tiles, which can be empty or have numbers that are powers of 2 (with a minimum value of 2).
The goal of the game is to be able to merge tiles until you obtain a tile with the number 2048 (hence the name).
On the other hand, you loose when the board is full and you can't make any more moves.

Game Mechanics
==============

You control the tiles on the board with the arrow keys.
When you press an arrow key, all the tiles move on that direction as much as possible. Then tiles move, if the next non-empty tile *in the direction of the movement* has the same number, then tiles are merged:


    .. parsed-literal::

            Before Move              After Move
          c0  c1  c2  c3
         ╔═══╦═══╦═══╦═══╗       ╔═══╦═══╦═══╦═══╗
      r0 ║ 2 ║ 2 ║   ║   ║       ║   ║   ║   ║ 4 ║
         ╠═══╬═══╬═══╬═══╣       ╠═══╬═══╬═══╬═══╣
      r1 ║   ║   ║   ║   ║       ║   ║   ║   ║   ║
         ╠═══╬═══╬═══╬═══╣  ->   ╠═══╬═══╬═══╬═══╣
      r2 ║   ║   ║   ║   ║       ║   ║   ║   ║   ║
         ╠═══╬═══╬═══╬═══╣       ╠═══╬═══╬═══╬═══╣
      r3 ║   ║   ║   ║   ║       ║   ║   ║   ║   ║
         ╚═══╩═══╩═══╩═══╝       ╚═══╩═══╩═══╩═══╝

However, tiles are only merged if the next neighbor itself was not merged:

    .. parsed-literal::

            Before Move              After Move
         ╔═══╦═══╦═══╦═══╗       ╔═══╦═══╦═══╦═══╗
         ║ 2 ║ 2 ║ 2 ║   ║       ║   ║   ║ 2 ║ 4 ║
         ╠═══╬═══╬═══╬═══╣       ╠═══╬═══╬═══╬═══╣
         ║   ║   ║   ║   ║       ║   ║   ║   ║   ║
         ╠═══╬═══╬═══╬═══╣  ->   ╠═══╬═══╬═══╬═══╣
         ║   ║   ║   ║   ║       ║   ║   ║   ║   ║
         ╠═══╬═══╬═══╬═══╣       ╠═══╬═══╬═══╬═══╣
         ║   ║   ║   ║   ║       ║   ║   ║   ║   ║
         ╚═══╩═══╩═══╩═══╝       ╚═══╩═══╩═══╩═══╝

Note in the previous example that tiles are "pushed" into the direction of the movement, and that tiles are merged first in the order that they are moved.
In that case, the tiles that were originally in columns 2 and 1 are merged and moved to the right as far as possible (column 3)

Here's another example where you can see that tiles can be merged only if the next neighbor has not been merged.
In this case tiles in columns 3 and 2 are merged and positioned in column 3, and tiles in columns 1 and 0 are merged and placed in column 2


    .. parsed-literal::

            Before Move              After Move
         ╔═══╦═══╦═══╦═══╗       ╔═══╦═══╦═══╦═══╗
         ║ 2 ║ 2 ║ 2 ║ 2 ║       ║   ║   ║ 4 ║ 4 ║
         ╠═══╬═══╬═══╬═══╣       ╠═══╬═══╬═══╬═══╣
         ║   ║   ║   ║   ║       ║   ║   ║   ║   ║
         ╠═══╬═══╬═══╬═══╣  ->   ╠═══╬═══╬═══╬═══╣
         ║   ║   ║   ║   ║       ║   ║   ║   ║   ║
         ╠═══╬═══╬═══╬═══╣       ╠═══╬═══╬═══╬═══╣
         ║   ║   ║   ║   ║       ║   ║   ║   ║   ║
         ╚═══╩═══╩═══╩═══╝       ╚═══╩═══╩═══╩═══╝

Here's another example. Notice that tiles are only merged if their value was the same *before* the movement.
Tiles in column 3 and 2 are merged because before the movement they had the same value, but notice that after the move is complete,
Tile in column 1 is not merged because it's value (4) was not the same as the value of it's next non-zero neighbor before the movement (column 2 which had a value of 2).


    .. parsed-literal::

            Before Move              After Move
         ╔═══╦═══╦═══╦═══╗       ╔═══╦═══╦═══╦═══╗
         ║ 8 ║ 4 ║ 2 ║ 2 ║       ║   ║ 8 ║ 4 ║ 4 ║
         ╠═══╬═══╬═══╬═══╣       ╠═══╬═══╬═══╬═══╣
         ║   ║   ║   ║   ║       ║   ║   ║   ║   ║
         ╠═══╬═══╬═══╬═══╣  ->   ╠═══╬═══╬═══╬═══╣
         ║   ║   ║   ║   ║       ║   ║   ║   ║   ║
         ╠═══╬═══╬═══╬═══╣       ╠═══╬═══╬═══╬═══╣
         ║   ║   ║   ║   ║       ║   ║   ║   ║   ║
         ╚═══╩═══╩═══╩═══╝       ╚═══╩═══╩═══╩═══╝




If no tiles can be merged they simply get "squashed" in the direction of the movement:


    .. parsed-literal::

            Before Move              After Move
         ╔═══╦═══╦═══╦═══╗       ╔═══╦═══╦═══╦═══╗
         ║   ║ 4 ║   ║   ║       ║   ║   ║   ║   ║
         ╠═══╬═══╬═══╬═══╣       ╠═══╬═══╬═══╬═══╣
         ║   ║   ║   ║   ║       ║   ║   ║   ║   ║
         ╠═══╬═══╬═══╬═══╣   ⇩   ╠═══╬═══╬═══╬═══╣
         ║   ║ 2 ║   ║   ║       ║   ║ 4 ║   ║   ║
         ╠═══╬═══╬═══╬═══╣       ╠═══╬═══╬═══╬═══╣
         ║   ║   ║   ║   ║       ║   ║ 2 ║   ║   ║
         ╚═══╩═══╩═══╩═══╝       ╚═══╩═══╩═══╩═══╝

New Tiles
=========

So far, we have only discussed the mechanics of the tile movements.
After the player makes a move, one of the empty tiles is randomly selected and is assigned a value of either 2 or 4 (with the former having a probability of 80%), regardless if there where merged tiles or not.
In the following example, a tile with a value of 4 was assigned to the tile in row 0, column 0.


    .. parsed-literal::

            Before Move              After Move
         ╔═══╦═══╦═══╦═══╗       ╔═══╦═══╦═══╦═══╗
         ║   ║ 4 ║   ║   ║       ║ 4 ║   ║   ║   ║
         ╠═══╬═══╬═══╬═══╣       ╠═══╬═══╬═══╬═══╣
         ║   ║   ║ 8 ║ 8 ║       ║   ║   ║   ║   ║
         ╠═══╬═══╬═══╬═══╣   ⇩   ╠═══╬═══╬═══╬═══╣
         ║   ║ 2 ║   ║   ║       ║   ║ 4 ║ 8 ║   ║
         ╠═══╬═══╬═══╬═══╣       ╠═══╬═══╬═══╬═══╣
         ║ 4 ║   ║ 2 ║   ║       ║ 4 ║ 2 ║ 2 ║ 8 ║
         ╚═══╩═══╩═══╩═══╝       ╚═══╩═══╩═══╩═══╝

You can see that if tiles are not merged during moves, the board starts to get filled up very quickly.


Starter code
============

For this lab, you will be provided with a Python starter code implementation that uses the curses library to present the game UI.
You should not have to worry about the presentation details, you only will be required to implement the game logic.

Download the archive with the labs starter code from this link: :download:`lab04starter.tar.gz<src/lab04starter.tar.gz>`

Once you have extracted the contents of the archive, you will find a file called ``2048.py``.
You do not need to make any changes to that file, but you will need it to run the game. That file builds the UI and calls functions that are expected to be implemented in a file called ``game_logic.py``

.. literalinclude:: src/2048.py


The archive contains a skeleton of the  `game_logic.py` file which  placeholders and docstrings for the functions that you need to implement.


.. literalinclude:: src/game_logic.py

There is also a subdirectory called ``tests`` that contains some sample tests that you can use for some of the functions that you will need to implement. Once you have implemented the logic of the ``initialize_board``, ``add_random_tile`` and ``get_empty_cells`` functions of the ``game_logic.py`` module, you should be able to run the sample tests:


    .. parsed-literal::

         >$ python3 -m unittest -v
         test_add_random_tile_empty_board (tests.test_game_logic.AddRandomTileTests) ... ok
         test_add_random_tile_full_board (tests.test_game_logic.AddRandomTileTests) ... ok
         test_add_random_tile_one_empty_tile (tests.test_game_logic.AddRandomTileTests) ... ok
         test_add_random_tile_partial_board (tests.test_game_logic.AddRandomTileTests) ... ok
         test_board_initial_tiles (tests.test_game_logic.TestInitializeBoard) ... ok
         test_board_size (tests.test_game_logic.TestInitializeBoard) ... ok
         test_initial_tiles_postions (tests.test_game_logic.TestInitializeBoard) ... ok

         ----------------------------------------------------------------------
         Ran 7 tests in 0.001s

         OK


Game Logic
==========

You have been assigned to implement the logic of the game, and *you need to adhere strictly* to the following implementation:

- The board shall be represented as a 2D array of size 4. 
- All the necessary imports for ``game_logic.py`` have already been added to the file, you should not require to import additional libraries. If you need to add new imports, only Python standard modules are permitted.

You will need to implement all the functions in ``game_logic``:

- ``initialize_board``: create the board at the begining of the game
- ``add_random_tile``: adds a tile in a board if there are empty tiles
- ``get_empty_tiles``: returns a list of empty tiles. This is a helper function for ``add_random_tile``
- ``move_up``: moves all the tiles in a board in an upward direction
- ``_find_next_position_up``: This is a helper function for ``move_up`` that returns the final location of a tile while on an upward movement.
- ``move_down``: same as ``move_up`` but for downward direction.
- ``_find_next_position_down``: same as ``_find_next_postion_up`` but for downward direction.
- ``move_left``: same as ``move_up`` but for leftward direction.
- ``_find_next_position_left``:same as ``_find_next_postion_up`` but for leftward direction. 
- ``move_right``: same as ``move_up`` but for the righward direction.
- ``_find_next_position_right``: same as ``_find_next_postion_up`` but for rightward direction.
- ``is_game_over``: determines if the game has ended, if the has been won and the score
- ``_is_tile_movable``: determines if a tile has a neighboring zero or a tile with the same value. Helper function for ``is_game_over``.

.. note::

    You need to follow the specifitions that are given in the docstrings provided in ``game_logic.py``. If you fail to do so, then your program will not pass the tests that will be used to grade your submission.

The functions ``move_{up,down,left,right}`` are all almost identical, and once you have coded one for a given direction, you should be able to easily apply to the other directions by making some simple changes. Same goes for ``_find_next_position_right``. (In fact they cold be implemented in a single function and have tan argument to specify the direction. However, following this approach might be a little confusing, so we are going to stick with implementing a different function for each direction.)


Specifications
==============
Convert the docstrings for each one of the functions into an enumerated set of specifications.
The ``specifications`` file has specifications for the ``initialize_board``, ``add_random_tile`` and ``get_empty_tiles`` functions as a help to get you started. Enhance this file by adding specifications for the rest of the functions in ``game_logic.py`` 


Unit Tests
==========

You are required to create a full suite of tests for all the functions that you implement.  As a recommendation use the specifications that you created as a tool to help you design which tests need to be added to the Test Suite. Add your tests to the ``tests/test_game_logic.py`` file.


.. admonition:: Submission:
    :class: worksheet

    You should submit to canvas:

    #. The updated ``game_logic.py``
    #. The updated ``tests/test_game_logic.py`` 
    #. The updated ``specifications`` file
